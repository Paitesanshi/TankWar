package client.strategy;

import client.client.Tank;
/**
 * 为了练习策略模式而写的接口
 * 策略模式： 在软件开发中常常遇到这种情况，实现某一个功能有多种算法或者策略，我们可以根据应用场景的不同选择不同的算法或者策略来完成该功能。
 * 把一个类(A)中经常改变或者将来可能改变的部分提取出来，作为一个接口(B)，然后在类(A)中包含这个接口(B)，这样类(A)的实例在运行时就可以随意调用实现了这个接口的类(C)的行为。
 * 比如定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换，使得算法可独立于使用它的客户而变化。
 */
public interface FireAction {//抽象策略
    public void fireAction(Tank tank);
}
